"use strict";var GL,GL_state={},GL_FALSE=!1,GL_TRUE=!0,GL_NO_ERROR=0,GL_INVALID_ENUM=1280,GL_INVALID_VALUE=1281,GL_INVALID_OPERATION=1282,GL_OUT_OF_MEMORY=1285,GL_INVALID_FRAMEBUFFER_OPERATION=1286,GL_CONTEXT_LOST,GL_ALPHA=6406,GL_RGB=6407,GL_RGBA=6408,GL_BYTE=5120,GL_UNSIGNED_BYTE=5121,GL_SHORT=5122,GL_UNSIGNED_SHORT=5123,GL_FLOAT=5126,GL_UNSIGNED_SHORT_5_6_5=33635,GL_UNSIGNED_SHORT_4_4_4_4=32819,GL_UNSIGNED_SHORT_5_5_5_1=32820,GL_POINTS=0,GL_LINES=1,GL_LINE_LOOP=2,GL_LINE_STRIP=3,GL_TRIANGLES=4,GL_TRIANGLE_STRIP=5,GL_TRIANGLE_FAN=6,GL_VERTEX_ARRAY=32884,GL_NORMAL_ARRAY=32885,GL_COLOR_ARRAY=32886,GL_TEXTURE_COORD_ARRAY=32888,GL_CULL_FACE=2884,GL_BLEND=3042,GL_DITHER=3024,GL_STENCIL_TEST=2960,GL_DEPTH_TEST=2929,GL_SCISSOR_TEST=3089,GL_POLYGON_OFFSET_FILL=32823,GL_SAMPLE_ALPHA_TO_COVERAGE=32926,GL_SAMPLE_COVERAGE=32928,GL_ZERO=0,GL_ONE=1,GL_SRC_COLOR=768,GL_ONE_MINUS_SRC_COLOR=769,GL_SRC_ALPHA=770,GL_ONE_MINUS_SRC_ALPHA=771,GL_DST_ALPHA=772,GL_ONE_MINUS_DST_ALPHA=773,GL_CW=2304,GL_CCW=2305,GL_FRONT=1028,GL_BACK=1029,GL_FRONT_AND_BACK=1032,GL_VENDOR=7936,GL_RENDERER=7937,GL_VERSION=7938,GL_EXTENSIONS=7939,GL_DEPTH_BUFFER_BIT=256,GL_STENCIL_BUFFER_BIT=1024,GL_COLOR_BUFFER_BIT=16384;function glDrawArrays(a,b,c){"use strict";GL.drawArrays(a,b,c)}function glDrawElements(a,b,c,d){"use strict";var e;return c===GL_UNSIGNED_BYTE?e=new Uint8Array(d):c===GL_UNSIGNED_SHORT?e=new Uint16Array(d):void 0,GL.finish(),GL.bufferSubData(GL.ELEMENT_ARRAY_BUFFER,0,e),void GL.drawElements(a,b,c,0)}function glDisable(a){"use strict";GL.disable(a)}function glEnable(a){"use strict";GL.enable(a)}function glIsEnabled(a){"use strict";return GL.isEnabled(a)}function glBlendFunc(a,b){"use strict";GL.blendFunc(a,b)}function glClear(a){"use strict";GL.clear(a)}function glClearColor(a,b,c,d){"use strict";GL.clearColor(a,b,c,d)}function glColorMask(a,b,c,d){"use strict";GL.colorMask(a,b,c,d)}function glScissor(a,b,c,d){"use strict";GL.scissor(a,b,c,d)}function glFlush(){"use strict";GL.flush()}function glFinish(){"use strict";GL.finish()}function glGetError(){"use strict";return GL.getError()}function glViewport(a,b,c,d){"use strict";GL.viewport(a,b,c,d)}function glReadPixels(a,b,c,d,e,f,g){"use strict";GL.readPixels(a,b,c,d,e,f,g.v)}function glGetString(a){"use strict";if(a===GL_EXTENSIONS){var b=[],c="",d=0;for(b=GL.getSupportedExtensions();d<b.length;)c.length&&(c+="\n"),c+=b[d],d+=1;return c}return GL.getParameter(a)}function glCullFace(a){"use strict";GL.cullFace(a)}function glFrontFace(a){"use strict";GL.frontFace(a)}function glLineWidth(a){"use strict";GL.lineWidth(a)}function glPointSize(a){"use strict";var b;return b=GL.getUniformLocation(GL_state.programs[GL_state.p][GL_state.qx],"point_size"),void GL.uniform1f(b,a)}function glColor4f(a,b,c,d){"use strict";var e=[],f=[a,b,c,d],g=0;for(e[0]=GL.getUniformLocation(GL_state.programs[0][0],"const_color"),e[1]=GL.getUniformLocation(GL_state.programs[1][0],"const_color"),e[2]=GL.getUniformLocation(GL_state.programs[2][0],"const_color");3>g;)GL.useProgram(GL_state.programs[g][0]),GL.uniform4fv(e[g],f),g+=1;GL.useProgram(GL_state.programs[GL_state.p][GL_state.qx])}function glEnableClientState(a){"use strict";var b;a===GL_VERTEX_ARRAY?b=0:a===GL_COLOR_ARRAY?(b=1,GL_state.qx=GL_state.q,GL.useProgram(GL_state.programs[GL_state.p][GL_state.q])):b=-1,GL.enableVertexAttribArray(b)}function glDisableClientState(a){"use strict";var b;a===GL_VERTEX_ARRAY?b=0:a===GL_COLOR_ARRAY?(b=1,GL_state.qx=0,GL.useProgram(GL_state.programs[GL_state.p][GL_state.qx])):b=-1,GL.disableVertexAttribArray(b)}function glVertexPointer(a,b,c,d){"use strict";GL.bindBuffer(GL.ARRAY_BUFFER,GL_state.buffer_objects[0]),GL.bufferSubData(GL.ARRAY_BUFFER,0,new Float32Array(d)),GL.vertexAttribPointer(0,a,b,!1,c,0),2===a?GL_state.p=2:3===a?GL_state.p=1:4===a?GL_state.p=0:void 0,GL.useProgram(GL_state.programs[GL_state.p][GL_state.qx])}function glColorPointer(a,b,c,d){"use strict";return GL.bindBuffer(GL.ARRAY_BUFFER,GL_state.buffer_objects[2]),GL.bufferSubData(GL.ARRAY_BUFFER,0,new Float32Array(d)),GL.vertexAttribPointer(1,a,b,!1,c,0),3===a?GL_state.q=2:4===a?GL_state.q=1:void 0,(0!==GL_state.qx&&(GL_state.qx=GL_state.q),void GL.useProgram(GL_state.programs[GL_state.p][GL_state.qx]))}function GL_get_context(a,b){"use strict";var c,d,e;if(GL&&GL.isContextLost()===GL_FALSE)return GL;c=a.getElementById(b),d={preserveDrawingBuffer:!0,depth:!0,alpha:!0,antialias:!0,premultipliedAlpha:!0};try{GL=c.getContext("webgl",d),GL||(GL=c.getContext("experimental-webgl",d))}catch(m){a.write("WebGL getContext() exception.<BR>"+m)}if(!GL)return null;GL_CONTEXT_LOST=GL.CONTEXT_LOST_WEBGL;var f=[["#line 1\nattribute highp vec4 pos;\nuniform float point_size;\nvoid main(void) {\n\tgl_Position = vec4(pos);\n\tgl_PointSize = point_size;\n}\n","#line 1\nuniform lowp vec4 const_color;\nvoid main(void) {\n\tgl_FragColor = const_color;\n}\n"],["#line 1\nattribute highp vec4 pos;\nuniform float point_size;\nvarying lowp vec4 outc;\nattribute lowp vec4 col;\nvoid main(void) {\n\tgl_Position = vec4(pos);\n\tgl_PointSize = point_size;\n\toutc = col;\n}\n","#line 1\nvarying lowp vec4 outc;\nvoid main(void) {\n\tgl_FragColor = outc;\n}\n"],["#line 1\nattribute highp vec4 pos;\nuniform float point_size;\nvarying lowp vec3 outc;\nattribute lowp vec3 col;\nvoid main(void) {\n\tgl_Position = vec4(pos);\n\tgl_PointSize = point_size;\n\toutc = col;\n}\n","#line 1\nvarying lowp vec3 outc;\nvoid main(void) {\n\tgl_FragColor = vec4(outc, 1.0);\n}\n"],["#line 1\nattribute highp vec3 pos;\nuniform float point_size;\nvoid main(void) {\n\tgl_Position = vec4(pos, 1.0);\n\tgl_PointSize = point_size;\n}\n","#line 1\nuniform lowp vec4 const_color;\nvoid main(void) {\n\tgl_FragColor = const_color;\n}\n"],["#line 1\nattribute highp vec3 pos;\nuniform float point_size;\nvarying lowp vec4 outc;\nattribute lowp vec4 col;\nvoid main(void) {\n\tgl_Position = vec4(pos, 1.0);\n\tgl_PointSize = point_size;\n\toutc = col;\n}\n","#line 1\nvarying lowp vec4 outc;\nvoid main(void) {\n\tgl_FragColor = outc;\n}\n"],["#line 1\nattribute highp vec3 pos;\nuniform float point_size;\nvarying lowp vec3 outc;\nattribute lowp vec3 col;\nvoid main(void) {\n\tgl_Position = vec4(pos, 1.0);\n\tgl_PointSize = point_size;\n\toutc = col;\n}\n","#line 1\nvarying lowp vec3 outc;\nvoid main(void) {\n\tgl_FragColor = vec4(outc, 1.0);\n}\n"],["#line 1\nattribute highp vec2 pos;\nuniform float point_size;\nvoid main(void) {\n\tgl_Position = vec4(pos, 0.0, 1.0);\n\tgl_PointSize = point_size;\n}\n","#line 1\nuniform lowp vec4 const_color;\nvoid main(void) {\n\tgl_FragColor = const_color;\n}\n"],["#line 1\nattribute highp vec2 pos;\nuniform float point_size;\nvarying lowp vec4 outc;\nattribute lowp vec4 col;\nvoid main(void) {\n\tgl_Position = vec4(pos, 0.0, 1.0);\n\tgl_PointSize = point_size;\n\toutc = col;\n}\n","#line 1\nvarying lowp vec4 outc;\nvoid main(void) {\n\tgl_FragColor = outc;\n}\n"],["#line 1\nattribute highp vec2 pos;\nuniform float point_size;\nvarying lowp vec3 outc;\nattribute lowp vec3 col;\nvoid main(void) {\n\tgl_Position = vec4(pos, 0.0, 1.0);\n\tgl_PointSize = point_size;\n\toutc = col;\n}\n","#line 1\nvarying lowp vec3 outc;\nvoid main(void) {\n\tgl_FragColor = vec4(outc, 1.0);\n}\n"]];GL_state.programs=[],GL_state.programs[0]=[],GL_state.programs[1]=[],GL_state.programs[2]=[];for(var g,h,j,k,l=0;9>l;)k=l%3,j=(l-k)/3,GL_state.programs[j][k]=GL.createProgram(),g=GL.createShader(GL.VERTEX_SHADER),h=GL.createShader(GL.FRAGMENT_SHADER),GL.shaderSource(g,f[l][0]),GL.attachShader(GL_state.programs[j][k],g),GL.shaderSource(h,f[l][1]),GL.attachShader(GL_state.programs[j][k],h),GL.compileShader(g),GL.compileShader(h),GL.bindAttribLocation(GL_state.programs[j][k],0,"pos"),GL.bindAttribLocation(GL_state.programs[j][k],1,"col"),GL.linkProgram(GL_state.programs[j][k]),GL.deleteShader(g),GL.deleteShader(h),l+=1;return GL_state.buffer_objects=[],GL_state.buffer_objects[0]=GL.createBuffer(),GL_state.buffer_objects[2]=GL.createBuffer(),e=GL.createBuffer(),GL.bindBuffer(GL.ELEMENT_ARRAY_BUFFER,e),GL.bufferData(GL.ELEMENT_ARRAY_BUFFER,65536,GL.DYNAMIC_DRAW),GL.bindBuffer(GL.ARRAY_BUFFER,GL_state.buffer_objects[2]),GL.bufferData(GL.ARRAY_BUFFER,262144,GL.DYNAMIC_DRAW),GL.bindBuffer(GL.ARRAY_BUFFER,GL_state.buffer_objects[0]),GL.bufferData(GL.ARRAY_BUFFER,262144,GL.DYNAMIC_DRAW),GL_state.p=0,GL_state.q=0,GL.useProgram(GL_state.programs[GL_state.p][GL_state.q]),GL_state.qx=0,glColor4f(1,1,1,1),glPointSize(1),glLineWidth(1),glEnable(GL_BLEND),glBlendFunc(GL_ONE,GL_ZERO),glColorMask(GL_TRUE,GL_TRUE,GL_TRUE,GL_TRUE),glCullFace(GL_BACK),glFrontFace(GL_CCW),glDisable(GL_CULL_FACE),glDisable(GL_DITHER),glDisable(GL_STENCIL_TEST),glDisable(GL_DEPTH_TEST),glDisable(GL_SCISSOR_TEST),glDisable(GL_POLYGON_OFFSET_FILL),glDisable(GL_SAMPLE_ALPHA_TO_COVERAGE),glDisable(GL_SAMPLE_COVERAGE),glVertexPointer(4,GL_FLOAT,0,0),glDisableClientState(GL_VERTEX_ARRAY),glColorPointer(4,GL_FLOAT,0,0),glDisableClientState(GL_COLOR_ARRAY),glClearColor(0,0,0,0),glClear(GL_COLOR_BUFFER_BIT+GL_DEPTH_BUFFER_BIT+GL_STENCIL_BUFFER_BIT),glFlush(),glFinish(),GL}
